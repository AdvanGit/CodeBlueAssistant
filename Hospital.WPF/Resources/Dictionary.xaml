<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:ser="clr-namespace:Hospital.WPF.Services"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls">

    <!--path-->

    <Geometry x:Key="treeIconLeft">M10,17L15,12L10,7V17Z</Geometry>
    <Geometry x:Key="treeIconDown">M7,10L12,15L17,10H7Z</Geometry>
    <Geometry x:Key="sortArrowDown">M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z</Geometry>
    <Geometry x:Key="sortArrowUp">M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z</Geometry>
    
    <!--converters-->

    <ser:ToUpperCaseConverter x:Key="ToUpperCaseConverter"/>
    <ser:ObjectEqualsToBoolConverter x:Key="ObjectEqualsToBoolConverter"/>
    <ser:MultiCommandExecuter x:Key="MultiCommandExecuter"/>
    <ser:MultiBooleanToVisibilityConverter x:Key="MultiBooleanToVisibilityConverter"/>
    <ser:DateToAgeConverter x:Key="DateToAgeConverter"/>

    <!--expanders-->

    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="Black"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyleSch" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}" Background="{DynamicResource BrushBackgroundPaper}" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BrushPrimaryBorderLight}">
                        <Grid SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="19"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" HorizontalAlignment="Stretch" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            <Path Grid.Column="1" x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" StrokeThickness="2" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ExpanderTemplate" TargetType="{x:Type Expander}">
        <Border Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                SnapsToDevicePixels="true">
            <DockPanel>
                <ToggleButton x:Name="HeaderSite"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              Content="{TemplateBinding Header}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              DockPanel.Dock="Top"
                              FontStyle="{TemplateBinding FontStyle}"
                              FontStretch="{TemplateBinding FontStretch}"
                              FontWeight="{TemplateBinding FontWeight}"
                              FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                              FontFamily="{TemplateBinding FontFamily}"
                              Foreground="{TemplateBinding Foreground}"
                              FontSize="{TemplateBinding FontSize}"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              MinHeight="0" MinWidth="0" Margin="0" Padding="4"
                              Style="{StaticResource ExpanderDownHeaderStyleSch}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <ContentPresenter x:Name="ExpandSite"
                                  DockPanel.Dock="Bottom"
                                  Focusable="false"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  Margin="0"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Visibility="Collapsed">
                    <ContentPresenter.LayoutTransform>
                        <ScaleTransform ScaleY="0"/>
                    </ContentPresenter.LayoutTransform>
                </ContentPresenter>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="1"
                             Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="0"
                             Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderHeaderFocusAmbulatory">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="Black"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyleAmb" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}" Name="exp_head_ambcommon"
                            Background="Transparent"
                            BorderThickness="0,0,0,0"
                            BorderBrush="Transparent">
                        <Grid SnapsToDevicePixels="False">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="0,0,0,0"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="True"
                                              VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="exp_head_ambcommon" Property="Background" Value="{DynamicResource BrushBackgroundPaper}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ExpanderAmbulatory" TargetType="{x:Type Expander}">
        <Border Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
            <DockPanel>
                <ToggleButton x:Name="HeaderSite"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              Content="{TemplateBinding Header}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              DockPanel.Dock="Top"
                              FontStyle="{TemplateBinding FontStyle}"
                              FontStretch="{TemplateBinding FontStretch}"
                              FontWeight="{TemplateBinding FontWeight}"
                              FocusVisualStyle="{StaticResource ExpanderHeaderFocusAmbulatory}"
                              FontFamily="{TemplateBinding FontFamily}"
                              Foreground="{TemplateBinding Foreground}"
                              FontSize="{TemplateBinding FontSize}"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              MinHeight="0" MinWidth="0" Margin="0" Padding="{TemplateBinding Padding}"
                              Style="{StaticResource ExpanderDownHeaderStyleAmb}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  Margin="0"
                                  
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Visibility="Collapsed">
                    <ContentPresenter.LayoutTransform>
                        <ScaleTransform ScaleY="0"/>
                    </ContentPresenter.LayoutTransform>
                </ContentPresenter>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty=
                               "(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="1"
                             Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty=
                               "(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="0"
                             Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderDownHeaderStyleDiag" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}" x:Name="b_ExpanderMethod"
                            Background="{DynamicResource BrushBackgroundPaper}"
                            BorderThickness="0,0,0,1"
                            BorderBrush="{DynamicResource BrushPrimaryBorderLight}">
                        <Grid SnapsToDevicePixels="False" Height="35">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="35"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Stretch"
                                              Margin="0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center"/>
                            <Path Grid.Column="0" x:Name="arrow" Width="15" Height="15"
                                  Data="{StaticResource treeIconLeft}"
                                  Fill="{DynamicResource BrushAccentInvert}"
                                  SnapsToDevicePixels="false"
                                  Stretch="Uniform"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="b_ExpanderMethod" Property="BorderThickness" Value="0"/>
                            <Setter Property="Data" TargetName="arrow" Value="{StaticResource treeIconDown}"/>
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource BrushAccent1}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ExpanderDiagTable" TargetType="{x:Type Expander}">
        <Border x:Name="ExpBorder" Background="{TemplateBinding Background}"
                BorderThickness="0" SnapsToDevicePixels="true">
            <DockPanel>
                <ToggleButton x:Name="HeaderSite"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              Content="{TemplateBinding Header}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              DockPanel.Dock="Top"
                              FontStyle="{TemplateBinding FontStyle}"
                              FontStretch="{TemplateBinding FontStretch}"
                              FontWeight="SemiBold"
                              FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                              FontFamily="{TemplateBinding FontFamily}"
                              Foreground="{DynamicResource BrushForegroundLight}"
                              FontSize="14"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              MinHeight="0" MinWidth="0" Margin="0" Padding="0"
                              Style="{StaticResource ExpanderDownHeaderStyleDiag}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  Margin="0"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Visibility="Collapsed">
                    <ContentPresenter.LayoutTransform>
                        <ScaleTransform ScaleY="1"/>
                    </ContentPresenter.LayoutTransform>
                </ContentPresenter>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="false">
                                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="0"
                             Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="1"
                             Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            
            <Trigger Property="IsExpanded" Value="true">
                <Setter TargetName="ExpBorder" Property="BorderThickness" Value="0"/>
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderDownHeaderStyleLab" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}" x:Name="br_labexp"
                            Background="{DynamicResource BrushBackgroundPaper}"
                            BorderThickness="0,0,0,1"
                            BorderBrush="{DynamicResource BrushPrimaryBorderLight}">
                        <Grid SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="40"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Stretch"
                                              Margin="5,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center"/>
                            <Path Grid.Column="0" x:Name="arrow" Width="15" Height="15"
                                  Data="{StaticResource treeIconLeft}"
                                  Fill="{DynamicResource BrushAccentInvert}"
                                  SnapsToDevicePixels="false"
                                  Stretch="Uniform"
                                  HorizontalAlignment="Left" Margin="20,0,0,0"
                                  VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--<Setter Property="BorderThickness" TargetName="br_labexp" Value="0"/>-->
                            <Setter Property="Data" TargetName="arrow" Value="{StaticResource treeIconDown}"/>
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource BrushAccent1}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ExpanderDiagLabTable" TargetType="{x:Type Expander}">
        <Border x:Name="ExpBorder" Background="{TemplateBinding Background}"
                BorderThickness="0" SnapsToDevicePixels="true">
            <DockPanel>
                <ToggleButton x:Name="HeaderSite"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              Content="{TemplateBinding Header}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              DockPanel.Dock="Top"
                              FontStyle="{TemplateBinding FontStyle}"
                              FontStretch="{TemplateBinding FontStretch}"
                              FontWeight="SemiBold"
                              FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                              FontFamily="{TemplateBinding FontFamily}"
                              Foreground="{TemplateBinding Foreground}"
                              FontSize="{TemplateBinding FontSize}"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              MinHeight="0" MinWidth="0" Margin="0" Padding="6"
                              Style="{StaticResource ExpanderDownHeaderStyleLab}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  Margin="0"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Visibility="Collapsed">
                    <ContentPresenter.LayoutTransform>
                        <ScaleTransform ScaleY="1"/>
                    </ContentPresenter.LayoutTransform>
                </ContentPresenter>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="false">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="0"
                             Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="1"
                             Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--listBoxItem-->

    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.IsSelected.Background" Color="{DynamicResource ColorBackgroundPaper}"/>
    <SolidColorBrush x:Key="Item.IsSelected.Border" Color="#FF26A0DA"/>

    <ControlTemplate x:Key="ListBoxItemAmbMenu" TargetType="{x:Type ListBoxItem}">
        <Border x:Name="Bd"
                Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="true">
            <ContentPresenter
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Cursor" Value="Hand"/>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.IsSelected.Background}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.IsSelected.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--others-->

    <Style TargetType="ListBoxItem" x:Key="TitleListBoxItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Accent}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Accent}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Margin="{TemplateBinding Margin}" ClipToBounds="{TemplateBinding ClipToBounds}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2" To="Normal" />
                                </VisualStateGroup.Transitions>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unselected" />
                                <VisualState Name="SelectedUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border Name="SelectedBorder" 
                                    BorderThickness="0,0,0,3" BorderBrush="{DynamicResource MahApps.Brushes.Accent}" Opacity="0"/>
                            <TextBlock  Text="{Binding Label}"
                                        Foreground="{TemplateBinding Foreground}"
                                        Padding="{TemplateBinding Padding}"
                                        FontSize="{TemplateBinding FontSize}"
                                        Width="{TemplateBinding Width}" 
                                        Height="{TemplateBinding Height}"/>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RegistratorSearchTab" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource BrushAccent1}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource BrushAccent1}"/>
                            <Setter Property="Background" Value="{DynamicResource BrushPrimaryPanel}" />
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}">
                        <Grid>
                            <TextBlock Text="{TemplateBinding Content}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Foreground="{TemplateBinding Foreground}"
                                        Padding="{TemplateBinding Padding}"
                                        FontSize="{TemplateBinding FontSize}"
                                        FontWeight="{TemplateBinding FontWeight}"
                                        Width="{TemplateBinding Width}" 
                                        Height="{TemplateBinding Height}"/>
                        </Grid>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushPrimaryBorderDark}"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="tb_PanelCaptionSeparator">
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="Background" Value="{DynamicResource BrushPrimaryPanelTitle}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Padding" Value="10,3"/>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="RegistratorSearchBarButton">
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="BorderThickness" Value="0,2,2,2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushAccent1}"/>
        <Setter Property="Background" Value="{DynamicResource BrushAccent1}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushBackgroundPaper}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource BrushAccent2}"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushAccent2}"/>
                            <Setter Property="Background" Value="{DynamicResource BrushAccent2}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                        CornerRadius="0,2,2,0"
                                        Margin="{TemplateBinding Margin}">
                        <ContentControl Content="{TemplateBinding Content}"
                                                    Foreground="{TemplateBinding Foreground}"
                                                    Padding="{TemplateBinding Padding}"
                                                    FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                                                    />
                    </Border>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGrid-->

    <Style x:Key="TableRow" TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource BrushPrimaryBorderLight}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TableCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}" Height="{TemplateBinding Height}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <TextBlock Foreground="{TemplateBinding Foreground}"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="20,0"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushForegroundDark}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimaryBorderLight}"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DataGrid}" x:Key="TableCommon" BasedOn="{StaticResource MahApps.Styles.DataGrid}">
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource BrushTableRowAlternationBackgroud}"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource BrushPrimaryBorderLight}"/>
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource BrushPrimaryBorderLight}"/>
        <Setter Property="CellStyle" Value="{StaticResource TableCell}"/>
        <Setter Property="RowStyle" Value="{StaticResource TableRow}"/>
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                    <Setter Property="Height" Value="35"/>
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Padding" Value="5,0"/>
                    <Setter Property="FontSize" Value="12"/>
                    <Setter Property="FontWeight" Value="SemiBold"/>
                    <Setter Property="Foreground" Value="{DynamicResource  BrushForegroundLight}"/>
                    <Setter Property="Background" Value="{DynamicResource BrushTableHeader}"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGridAmbulatory-->

    <Style x:Key="dg_ColumnHeaderAmbulatory" TargetType="{x:Type DataGridColumnHeader}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="SortDirection" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Gray8}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource BrushTableHeader}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BrushAccent1}" />
        <Setter Property="BorderThickness" Value="0,3,0,0"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Foreground" Value="{DynamicResource BrushForegroundLight}" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="MinHeight" Value="35" />
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Padding" Value="{Binding Path=(mah:DataGridHelper.ColumnHeaderPadding), FallbackValue=0, TargetNullValue=0, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Name="BackgroundBorder"
                                Grid.ColumnSpan="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentControl Name="HeaderContent" Grid.Column="0"
                                              Margin="{TemplateBinding BorderThickness}"
                                              Padding="{TemplateBinding Padding}"
                                              HorizontalContentAlignment="Center"
                                              VerticalContentAlignment="Center"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat, Converter={StaticResource ToUpperCaseConverter}}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Path Name="SortArrow" Grid.Column="1" Width="10" Height="6" Margin="5,0,10,0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BrushForegroundLight}"
                              Stretch="Fill" Visibility="Collapsed" />
                        <Thumb Name="PART_LeftHeaderGripper"
                               HorizontalAlignment="Left"
                               Background="Transparent"
                               Style="{StaticResource MahApps.Styles.Thumb.ColumnHeaderGripper}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Data" Value="{DynamicResource sortArrowUp}" />
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Data" Value="{DynamicResource sortArrowDown}" />
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="DisplayIndex" Value="0">
                            <Setter TargetName="PART_LeftHeaderGripper" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="dg_TableRowAmbulatory" TargetType="{x:Type DataGridRow}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimaryBorderLight}"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource BrushTableSelectedLightTransparent}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BrushTableSelectedLight}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="dg_tableCellAmbulatory" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource MahApps.Styles.DataGridCell}">
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushForegroundMid}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimaryBorderLight}"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource BrushForegroundDark}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BrushTableSelectedLightTransparent}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource BrushForegroundMid}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="dg_Ambulatory" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MahApps.Styles.DataGrid}">
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource BrushTableRowAlternationBackgroud}"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="IsReadOnly" Value="False"/>
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource dg_ColumnHeaderAmbulatory}"/>
        <Setter Property="CellStyle" Value="{DynamicResource dg_tableCellAmbulatory}"/>
        <Setter Property="RowStyle" Value="{DynamicResource dg_TableRowAmbulatory}"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
    </Style>

</ResourceDictionary>