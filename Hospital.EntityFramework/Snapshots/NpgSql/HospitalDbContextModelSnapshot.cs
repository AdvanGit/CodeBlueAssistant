// <auto-generated />
using System;
using Hospital.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hospital.WPF.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hospital.Domain.Model.Belay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Belays");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Change", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("TimeSpan")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StaffId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<int?>("TitleId")
                        .HasColumnType("integer");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("_Adress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TitleId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DepartmentTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DepartmentTitles");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DiagnosisGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DiagnosisGroupId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DiagnosisClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiagnosisClasses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DiagnosisGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DiagnosisClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisClassId");

                    b.ToTable("DiagnosisGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DrugForm")
                        .HasColumnType("integer");

                    b.Property<int?>("DrugSubGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Substance")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrugSubGroupId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DrugClasses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int?>("DrugSubClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrugSubClassId");

                    b.ToTable("DrugGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DrugClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrugClassId");

                    b.ToTable("DrugSubClasses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int?>("DrugGroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsReciept")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrugGroupId");

                    b.ToTable("DrugSubGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DoctorDestinationId")
                        .HasColumnType("integer");

                    b.Property<int?>("EntryOutId")
                        .HasColumnType("integer");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("integer");

                    b.Property<int>("InviteStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("MedCardId")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int?>("RegistratorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TargetDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorDestinationId");

                    b.HasIndex("EntryOutId");

                    b.HasIndex("MedCardId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RegistratorId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Hospital.Domain.Model.MedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Conclusion")
                        .HasColumnType("text");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DiagnosisDoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("DiagnosisId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDifferential")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreliminary")
                        .HasColumnType("boolean");

                    b.Property<string>("Option")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Recomendation")
                        .HasColumnType("text");

                    b.Property<int?>("TherapyDoctorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisDoctorId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TherapyDoctorId");

                    b.ToTable("MedCards");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BelayCode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BelayDateOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("BelayId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasChild")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMarried")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MidName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("_Adress")
                        .HasColumnType("text")
                        .HasColumnName("Adress");

                    b.HasKey("Id");

                    b.HasIndex("BelayId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PharmacoTherapyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DiagnosisDoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("DiagnosisId")
                        .HasColumnType("integer");

                    b.Property<string>("Dose")
                        .HasColumnType("text");

                    b.Property<int?>("DrugId")
                        .HasColumnType("integer");

                    b.Property<int?>("MedCardId")
                        .HasColumnType("integer");

                    b.Property<int?>("TherapyDoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Trademark")
                        .HasColumnType("text");

                    b.Property<int>("Treatment")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisDoctorId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("DrugId");

                    b.HasIndex("MedCardId");

                    b.HasIndex("TherapyDoctorId");

                    b.ToTable("PharmacoTherapyDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysioTherapyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DiagnosisDoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("DiagnosisId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Localization")
                        .HasColumnType("text");

                    b.Property<int?>("MedCardId")
                        .HasColumnType("integer");

                    b.Property<int?>("OperationDoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Params")
                        .HasColumnType("text");

                    b.Property<int?>("PhysTherMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("PhysioTherapyFactorId")
                        .HasColumnType("integer");

                    b.Property<int>("ProcedureStatus")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("RemainingTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("TargetDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TherapyDoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("Treatment")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisDoctorId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("MedCardId");

                    b.HasIndex("OperationDoctorId");

                    b.HasIndex("PhysTherMethodId");

                    b.HasIndex("PhysioTherapyFactorId");

                    b.HasIndex("TherapyDoctorId");

                    b.ToTable("PhysioTherapyDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysioTherapyFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int?>("PhysTherFactGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Tool")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PhysTherFactGroupId");

                    b.ToTable("PhysioTherapyFactors");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherFactGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PhysTherFactGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int?>("PhysTherMethodGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PhysTherMethodGroupId");

                    b.ToTable("PhysTherMethods");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherMethodGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PhysTherMethodGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Cabinet")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MidName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("WeekDays")
                        .HasColumnType("integer");

                    b.Property<string>("_Adress")
                        .HasColumnType("text")
                        .HasColumnName("Adress");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgeryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SurgeryType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SurgeryGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgeryOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurgeryGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SurgeryGroupId");

                    b.ToTable("SurgeryOperations");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgeryTherapyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DiagnosisDoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("DiagnosisId")
                        .HasColumnType("integer");

                    b.Property<int?>("MedCardId")
                        .HasColumnType("integer");

                    b.Property<string>("Option")
                        .HasColumnType("text");

                    b.Property<int>("ProcedureStatus")
                        .HasColumnType("integer");

                    b.Property<int>("SurgeryClass")
                        .HasColumnType("integer");

                    b.Property<int?>("SurgeryOperationId")
                        .HasColumnType("integer");

                    b.Property<int>("SurgeryPriority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TargetDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TherapyDoctorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisDoctorId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("MedCardId");

                    b.HasIndex("SurgeryOperationId");

                    b.HasIndex("TherapyDoctorId");

                    b.ToTable("SurgeryTherapyDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("DefaultOption")
                        .HasColumnType("text");

                    b.Property<string>("Measure")
                        .HasColumnType("text");

                    b.Property<int?>("TestTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateResult")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSymptom")
                        .HasColumnType("boolean");

                    b.Property<int?>("MedCardId")
                        .HasColumnType("integer");

                    b.Property<string>("Option")
                        .HasColumnType("text");

                    b.Property<int?>("StaffResultId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedCardId");

                    b.HasIndex("StaffResultId");

                    b.HasIndex("TestId");

                    b.ToTable("TestDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestNormalValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeIn")
                        .HasColumnType("integer");

                    b.Property<int>("AgeOut")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestNormalValues");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("JsonObjects")
                        .HasColumnType("text");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("TestTemplates");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("TestMethod")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Change", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", null)
                        .WithMany("Changes")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Hospital.Domain.Model.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Department", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Hospital.Domain.Model.DepartmentTitle", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.Navigation("Manager");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Diagnosis", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany("Diagnoses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Hospital.Domain.Model.DiagnosisGroup", "DiagnosisGroup")
                        .WithMany("Diagnoses")
                        .HasForeignKey("DiagnosisGroupId");

                    b.Navigation("Department");

                    b.Navigation("DiagnosisGroup");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DiagnosisGroup", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DiagnosisClass", "DiagnosisClass")
                        .WithMany("DiagnosisGroups")
                        .HasForeignKey("DiagnosisClassId");

                    b.Navigation("DiagnosisClass");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Drug", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DrugSubGroup", "DrugSubGroup")
                        .WithMany("Drugs")
                        .HasForeignKey("DrugSubGroupId");

                    b.Navigation("DrugSubGroup");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugGroup", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DrugSubClass", "DrugSubClass")
                        .WithMany("DrugGroups")
                        .HasForeignKey("DrugSubClassId");

                    b.Navigation("DrugSubClass");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubClass", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DrugClass", "DrugClass")
                        .WithMany("DrugSubClasses")
                        .HasForeignKey("DrugClassId");

                    b.Navigation("DrugClass");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubGroup", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DrugGroup", "DrugGroup")
                        .WithMany("DrugSubGroups")
                        .HasForeignKey("DrugGroupId");

                    b.Navigation("DrugGroup");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Entry", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "DoctorDestination")
                        .WithMany("DoctorDestinations")
                        .HasForeignKey("DoctorDestinationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hospital.Domain.Model.Entry", "EntryOut")
                        .WithMany()
                        .HasForeignKey("EntryOutId");

                    b.HasOne("Hospital.Domain.Model.MedCard", "MedCard")
                        .WithMany()
                        .HasForeignKey("MedCardId");

                    b.HasOne("Hospital.Domain.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Hospital.Domain.Model.Staff", "Registrator")
                        .WithMany("Registrators")
                        .HasForeignKey("RegistratorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DoctorDestination");

                    b.Navigation("EntryOut");

                    b.Navigation("MedCard");

                    b.Navigation("Patient");

                    b.Navigation("Registrator");
                });

            modelBuilder.Entity("Hospital.Domain.Model.MedCard", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "DiagnosisDoctor")
                        .WithMany()
                        .HasForeignKey("DiagnosisDoctorId");

                    b.HasOne("Hospital.Domain.Model.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Hospital.Domain.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Hospital.Domain.Model.Staff", "TherapyDoctor")
                        .WithMany()
                        .HasForeignKey("TherapyDoctorId");

                    b.Navigation("Diagnosis");

                    b.Navigation("DiagnosisDoctor");

                    b.Navigation("Patient");

                    b.Navigation("TherapyDoctor");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Patient", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Belay", "Belay")
                        .WithMany()
                        .HasForeignKey("BelayId");

                    b.Navigation("Belay");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PharmacoTherapyData", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "DiagnosisDoctor")
                        .WithMany()
                        .HasForeignKey("DiagnosisDoctorId");

                    b.HasOne("Hospital.Domain.Model.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Hospital.Domain.Model.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId");

                    b.HasOne("Hospital.Domain.Model.MedCard", "MedCard")
                        .WithMany("PharmacoTherapyDatas")
                        .HasForeignKey("MedCardId");

                    b.HasOne("Hospital.Domain.Model.Staff", "TherapyDoctor")
                        .WithMany()
                        .HasForeignKey("TherapyDoctorId");

                    b.Navigation("Diagnosis");

                    b.Navigation("DiagnosisDoctor");

                    b.Navigation("Drug");

                    b.Navigation("MedCard");

                    b.Navigation("TherapyDoctor");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysioTherapyData", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "DiagnosisDoctor")
                        .WithMany()
                        .HasForeignKey("DiagnosisDoctorId");

                    b.HasOne("Hospital.Domain.Model.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Hospital.Domain.Model.MedCard", "MedCard")
                        .WithMany("PhysioTherapyDatas")
                        .HasForeignKey("MedCardId");

                    b.HasOne("Hospital.Domain.Model.Staff", "OperationDoctor")
                        .WithMany()
                        .HasForeignKey("OperationDoctorId");

                    b.HasOne("Hospital.Domain.Model.PhysTherMethod", "PhysTherMethod")
                        .WithMany()
                        .HasForeignKey("PhysTherMethodId");

                    b.HasOne("Hospital.Domain.Model.PhysioTherapyFactor", "PhysioTherapyFactor")
                        .WithMany()
                        .HasForeignKey("PhysioTherapyFactorId");

                    b.HasOne("Hospital.Domain.Model.Staff", "TherapyDoctor")
                        .WithMany()
                        .HasForeignKey("TherapyDoctorId");

                    b.Navigation("Diagnosis");

                    b.Navigation("DiagnosisDoctor");

                    b.Navigation("MedCard");

                    b.Navigation("OperationDoctor");

                    b.Navigation("PhysTherMethod");

                    b.Navigation("PhysioTherapyFactor");

                    b.Navigation("TherapyDoctor");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysioTherapyFactor", b =>
                {
                    b.HasOne("Hospital.Domain.Model.PhysTherFactGroup", "PhysTherFactGroup")
                        .WithMany("PhysioTherapyFactors")
                        .HasForeignKey("PhysTherFactGroupId");

                    b.Navigation("PhysTherFactGroup");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherMethod", b =>
                {
                    b.HasOne("Hospital.Domain.Model.PhysTherMethodGroup", "PhysTherMethodGroup")
                        .WithMany("PhysTherMethods")
                        .HasForeignKey("PhysTherMethodGroupId");

                    b.Navigation("PhysTherMethodGroup");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Staff", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany("Staffs")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgeryOperation", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Hospital.Domain.Model.SurgeryGroup", "SurgeryGroup")
                        .WithMany("SurgeryOperations")
                        .HasForeignKey("SurgeryGroupId");

                    b.Navigation("Department");

                    b.Navigation("SurgeryGroup");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgeryTherapyData", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "DiagnosisDoctor")
                        .WithMany()
                        .HasForeignKey("DiagnosisDoctorId");

                    b.HasOne("Hospital.Domain.Model.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Hospital.Domain.Model.MedCard", "MedCard")
                        .WithMany("SurgeryTherapyDatas")
                        .HasForeignKey("MedCardId");

                    b.HasOne("Hospital.Domain.Model.SurgeryOperation", "SurgeryOperation")
                        .WithMany()
                        .HasForeignKey("SurgeryOperationId");

                    b.HasOne("Hospital.Domain.Model.Staff", "TherapyDoctor")
                        .WithMany()
                        .HasForeignKey("TherapyDoctorId");

                    b.Navigation("Diagnosis");

                    b.Navigation("DiagnosisDoctor");

                    b.Navigation("MedCard");

                    b.Navigation("SurgeryOperation");

                    b.Navigation("TherapyDoctor");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Test", b =>
                {
                    b.HasOne("Hospital.Domain.Model.TestType", "TestType")
                        .WithMany("Tests")
                        .HasForeignKey("TestTypeId");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestData", b =>
                {
                    b.HasOne("Hospital.Domain.Model.MedCard", "MedCard")
                        .WithMany("TestDatas")
                        .HasForeignKey("MedCardId");

                    b.HasOne("Hospital.Domain.Model.Staff", "StaffResult")
                        .WithMany()
                        .HasForeignKey("StaffResultId");

                    b.HasOne("Hospital.Domain.Model.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.Navigation("MedCard");

                    b.Navigation("StaffResult");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestNormalValue", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Test", "Test")
                        .WithMany("NormalValues")
                        .HasForeignKey("TestId");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestTemplate", b =>
                {
                    b.HasOne("Hospital.Domain.Model.TestType", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Hospital.Domain.Model.Department", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestType", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Department", b =>
                {
                    b.Navigation("Changes");

                    b.Navigation("Diagnoses");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DiagnosisClass", b =>
                {
                    b.Navigation("DiagnosisGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DiagnosisGroup", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugClass", b =>
                {
                    b.Navigation("DrugSubClasses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugGroup", b =>
                {
                    b.Navigation("DrugSubGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubClass", b =>
                {
                    b.Navigation("DrugGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubGroup", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("Hospital.Domain.Model.MedCard", b =>
                {
                    b.Navigation("PharmacoTherapyDatas");

                    b.Navigation("PhysioTherapyDatas");

                    b.Navigation("SurgeryTherapyDatas");

                    b.Navigation("TestDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherFactGroup", b =>
                {
                    b.Navigation("PhysioTherapyFactors");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherMethodGroup", b =>
                {
                    b.Navigation("PhysTherMethods");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Staff", b =>
                {
                    b.Navigation("DoctorDestinations");

                    b.Navigation("Registrators");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgeryGroup", b =>
                {
                    b.Navigation("SurgeryOperations");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Test", b =>
                {
                    b.Navigation("NormalValues");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestType", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
