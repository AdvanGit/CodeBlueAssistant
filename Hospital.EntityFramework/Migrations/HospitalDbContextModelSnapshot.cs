// <auto-generated />
using System;
using Hospital.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hospital.EntityFramework.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hospital.Domain.Model.Belay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Belays");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Change", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ChangeTitle")
                        .HasColumnType("tinyint");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeSpan")
                        .HasColumnType("time");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("_Adress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TitleId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DepartmentTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DepartmentTitles");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrugForm")
                        .HasColumnType("int");

                    b.Property<int?>("DrugSubGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Substance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugSubGroupId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrugClasses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrugSubClassId")
                        .HasColumnType("int");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugSubClassId");

                    b.ToTable("DrugGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrugClassId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugClassId");

                    b.ToTable("DrugSubClasses");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrugGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReciept")
                        .HasColumnType("bit");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugGroupId");

                    b.ToTable("DrugSubGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Chain")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TargetDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BelayCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("BelayDateOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BelayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasChild")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMarried")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneNumeber")
                        .HasColumnType("bigint");

                    b.Property<string>("_Adress")
                        .HasColumnName("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BelayId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PharmacoTherapyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("Treatment")
                        .HasColumnType("int");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("VisitId");

                    b.ToTable("PharmacoTherapyDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherFactGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhysTherFactGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysTherMethodGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhysTherMethodGroupId");

                    b.ToTable("PhysTherMethods");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherMethodGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhysTherMethodGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysioTherapyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysTherMethodId")
                        .HasColumnType("int");

                    b.Property<int>("PhysTherStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PhysioTherapyFactorId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TargetDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhysTherMethodId");

                    b.HasIndex("PhysioTherapyFactorId");

                    b.HasIndex("StaffId");

                    b.HasIndex("VisitId");

                    b.ToTable("PhysioTherapyDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysioTherapyFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhysTherFactGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tool")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhysTherFactGroupId");

                    b.ToTable("PhysioTherapyFactors");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("Cabinet")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneNumeber")
                        .HasColumnType("bigint");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("WeekDays")
                        .HasColumnType("tinyint");

                    b.Property<string>("_Adress")
                        .HasColumnName("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgencyEndoscop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tool")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurgencyEndoscops");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgencyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurgencyGroups");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgencyOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FullTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurgencyGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SurgencyGroupId");

                    b.ToTable("SurgencyOperations");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgencyTherapyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurgencyClass")
                        .HasColumnType("int");

                    b.Property<int?>("SurgencyEndoscopId")
                        .HasColumnType("int");

                    b.Property<int?>("SurgencyOperationId")
                        .HasColumnType("int");

                    b.Property<int>("SurgencyPriority")
                        .HasColumnType("int");

                    b.Property<int>("SurgencyStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("TargetDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurgencyEndoscopId");

                    b.HasIndex("SurgencyOperationId");

                    b.HasIndex("VisitId");

                    b.ToTable("SurgencyTherapyDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Measure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateResult")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSymptom")
                        .HasColumnType("bit");

                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffResultId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffResultId");

                    b.HasIndex("TestId");

                    b.HasIndex("VisitId");

                    b.ToTable("TestDatas");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestNormalValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeIn")
                        .HasColumnType("int");

                    b.Property<int>("AgeOut")
                        .HasColumnType("int");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestNormalValues");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("TestMethod")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("EntryInId")
                        .HasColumnType("int");

                    b.Property<int?>("EntryOutId")
                        .HasColumnType("int");

                    b.Property<string>("Recomendation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("EntryInId");

                    b.HasIndex("EntryOutId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Change", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany("Changes")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Department", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Hospital.Domain.Model.DepartmentTitle", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Diagnosis", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany("Diagnoses")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Drug", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DrugSubGroup", "DrugSubGroup")
                        .WithMany("Drugs")
                        .HasForeignKey("DrugSubGroupId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugGroup", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DrugSubClass", "DrugSubClass")
                        .WithMany("DrugGroups")
                        .HasForeignKey("DrugSubClassId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubClass", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DrugClass", "DrugClass")
                        .WithMany("DrugSubClasses")
                        .HasForeignKey("DrugClassId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.DrugSubGroup", b =>
                {
                    b.HasOne("Hospital.Domain.Model.DrugGroup", "DrugGroup")
                        .WithMany("DrugSubGroups")
                        .HasForeignKey("DrugGroupId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Entry", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Domain.Model.Patient", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Belay", "Belay")
                        .WithMany()
                        .HasForeignKey("BelayId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PharmacoTherapyData", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId");

                    b.HasOne("Hospital.Domain.Model.Visit", "Visit")
                        .WithMany("PharmacoTherapyDatas")
                        .HasForeignKey("VisitId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysTherMethod", b =>
                {
                    b.HasOne("Hospital.Domain.Model.PhysTherMethodGroup", "PhysTherMethodGroup")
                        .WithMany("PhysTherMethods")
                        .HasForeignKey("PhysTherMethodGroupId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysioTherapyData", b =>
                {
                    b.HasOne("Hospital.Domain.Model.PhysTherMethod", "PhysTherMethod")
                        .WithMany()
                        .HasForeignKey("PhysTherMethodId");

                    b.HasOne("Hospital.Domain.Model.PhysioTherapyFactor", "PhysioTherapyFactor")
                        .WithMany()
                        .HasForeignKey("PhysioTherapyFactorId");

                    b.HasOne("Hospital.Domain.Model.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("Hospital.Domain.Model.Visit", "Visit")
                        .WithMany("PhysioTherapyDatas")
                        .HasForeignKey("VisitId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.PhysioTherapyFactor", b =>
                {
                    b.HasOne("Hospital.Domain.Model.PhysTherFactGroup", "PhysTherFactGroup")
                        .WithMany("PhysioTherapyFactors")
                        .HasForeignKey("PhysTherFactGroupId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Staff", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany("Staffs")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgencyOperation", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Hospital.Domain.Model.SurgencyGroup", "SurgencyGroup")
                        .WithMany("SurgencyOperations")
                        .HasForeignKey("SurgencyGroupId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.SurgencyTherapyData", b =>
                {
                    b.HasOne("Hospital.Domain.Model.SurgencyEndoscop", "SurgencyEndoscop")
                        .WithMany()
                        .HasForeignKey("SurgencyEndoscopId");

                    b.HasOne("Hospital.Domain.Model.SurgencyOperation", "SurgencyOperation")
                        .WithMany()
                        .HasForeignKey("SurgencyOperationId");

                    b.HasOne("Hospital.Domain.Model.Visit", "Visit")
                        .WithMany("SurgencyTherapyDatas")
                        .HasForeignKey("VisitId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Test", b =>
                {
                    b.HasOne("Hospital.Domain.Model.TestType", "TestType")
                        .WithMany("Tests")
                        .HasForeignKey("TestTypeId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestData", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Staff", "StaffResult")
                        .WithMany()
                        .HasForeignKey("StaffResultId");

                    b.HasOne("Hospital.Domain.Model.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.HasOne("Hospital.Domain.Model.Visit", "Visit")
                        .WithMany("TestDatas")
                        .HasForeignKey("VisitId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestNormalValue", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Test", "Test")
                        .WithMany("NormalValues")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.TestType", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Hospital.Domain.Model.Visit", b =>
                {
                    b.HasOne("Hospital.Domain.Model.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Hospital.Domain.Model.Entry", "EntryIn")
                        .WithMany()
                        .HasForeignKey("EntryInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Model.Entry", "EntryOut")
                        .WithMany()
                        .HasForeignKey("EntryOutId");
                });
#pragma warning restore 612, 618
        }
    }
}
